import torch
import numpy as np
import math
import torch.nn as nn

def sigmoid(x):
    return 1 / (1 + math.exp(-x))

m = nn.Sigmoid()

a = torch.tensor([[[ 37.7479, 802.8301],
         [ 20.9454, 801.7559],
         [ 24.5546, 808.8967],
         [129.5204, 806.3510],
         [-18.7712, 803.1296],
         [ 26.7551, 795.3149]],
        [[ 38.2863, 802.7364],
         [ 21.7626, 801.6590],
         [ 24.6553, 808.8380],
         [131.1165, 806.2404],
         [-19.3595, 803.1050],
         [ 26.8172, 795.2475]],
        [[ 38.8548, 802.6326],
         [ 22.4612, 801.5639],
         [ 24.7682, 808.7939],
         [132.7495, 806.0929],
         [-19.7642, 803.1129],
         [ 26.8991, 795.1965]],
        [[ 39.4450, 802.5135],
         [ 23.0678, 801.4748],
         [ 24.8767, 808.7530],
         [134.3936, 805.8976],
         [-20.0441, 803.1342],
         [ 26.9822, 795.1501]],
        [[ 40.0494, 802.3846],
         [ 23.5936, 801.4001],
         [ 24.9747, 808.7164],
         [136.0281, 805.6655],
         [-20.2437, 803.1610],
         [ 27.0589, 795.1089]],
        [[ 40.6643, 802.2533],
         [ 24.0501, 801.3454],
         [ 25.0620, 808.6857],
         [137.6470, 805.4120],
         [-20.3914, 803.1900],
         [ 27.1280, 795.0740]],
        [[ 41.2874, 802.1255],
         [ 24.4480, 801.3120],
         [ 25.1404, 808.6620],
         [139.2518, 805.1483],
         [-20.5050, 803.2197],
         [ 27.1907, 795.0464]],
        [[ 41.9176, 802.0062],
         [ 24.7973, 801.2989],
         [ 25.2120, 808.6456],
         [140.8456, 804.8814],
         [-20.5955, 803.2494],
         [ 27.2485, 795.0262]],
        [[ 42.5542, 801.8984],
         [ 25.1059, 801.3037],
         [ 25.2785, 808.6361],
         [142.4316, 804.6154],
         [-20.6695, 803.2786],
         [ 27.3027, 795.0129]],
        [[ 43.1969, 801.8044],
         [ 25.3804, 801.3237],
         [ 25.3410, 808.6331],
         [144.0123, 804.3524],
         [-20.7311, 803.3074],
         [ 27.3543, 795.0063]],
        [[ 43.8455, 801.7255],
         [ 25.6259, 801.3561],
         [ 25.4005, 808.6359],
         [145.5894, 804.0935],
         [-20.7824, 803.3358],
         [ 27.4041, 795.0055]],
        [[ 44.4998, 801.6625],
         [ 25.8462, 801.3987],
         [ 25.4575, 808.6440],
         [147.1640, 803.8392],
         [-20.8249, 803.3641],
         [ 27.4525, 795.0101]],
        [[ 45.1594, 801.6158],
         [ 26.0444, 801.4495],
         [ 25.5125, 808.6567],
         [148.7372, 803.5897],
         [-20.8596, 803.3925],
         [ 27.4998, 795.0195]],
        [[ 45.8238, 801.5855],
         [ 26.2229, 801.5066],
         [ 25.5658, 808.6736],
         [150.3093, 803.3449],
         [-20.8873, 803.4213],
         [ 27.5461, 795.0333]],
        [[ 46.4926, 801.5715],
         [ 26.3841, 801.5687],
         [ 25.6174, 808.6942],
         [151.8809, 803.1045],
         [-20.9084, 803.4507],
         [ 27.5916, 795.0508]],
        [[ 47.1649, 801.5738],
         [ 26.5295, 801.6346],
         [ 25.6676, 808.7180],
         [153.4521, 802.8683],
         [-20.9237, 803.4808],
         [ 27.6363, 795.0717]],
        [[ 47.8400, 801.5920],
         [ 26.6609, 801.7036],
         [ 25.7164, 808.7446],
         [155.0232, 802.6359],
         [-20.9335, 803.5117],
         [ 27.6803, 795.0956]],
        [[ 48.5172, 801.6261],
         [ 26.7796, 801.7747],
         [ 25.7639, 808.7737],
         [156.5940, 802.4071],
         [-20.9385, 803.5433],
         [ 27.7235, 795.1222]],
        [[ 49.1956, 801.6755],
         [ 26.8870, 801.8474],
         [ 25.8102, 808.8051],
         [158.1646, 802.1815],
         [-20.9391, 803.5760],
         [ 27.7660, 795.1512]],
        [[ 49.8745, 801.7402],
         [ 26.9842, 801.9211],
         [ 25.8554, 808.8383],
         [159.7351, 801.9590],
         [-20.9358, 803.6094],
         [ 27.8078, 795.1823]],
        [[ 50.5532, 801.8198],
         [ 27.0723, 801.9955],
         [ 25.8995, 808.8734],
         [161.3053, 801.7393],
         [-20.9290, 803.6437],
         [ 27.8490, 795.2151]],
        [[ 51.2310, 801.9138],
         [ 27.1521, 802.0702],
         [ 25.9427, 808.9099],
         [162.8753, 801.5220],
         [-20.9191, 803.6790],
         [ 27.8895, 795.2498]],
        [[ 51.9072, 802.0222],
         [ 27.2246, 802.1449],
         [ 25.9850, 808.9477],
         [164.4450, 801.3071],
         [-20.9064, 803.7149],
         [ 27.9295, 795.2858]],
        [[ 52.5813, 802.1446],
         [ 27.2906, 802.2195],
         [ 26.0265, 808.9868],
         [166.0143, 801.0945],
         [-20.8912, 803.7516],
         [ 27.9689, 795.3232]],
        [[ 53.2528, 802.2806],
         [ 27.3506, 802.2938],
         [ 26.0672, 809.0268],
         [167.5832, 800.8839],
         [-20.8739, 803.7891],
         [ 28.0079, 795.3618]]])

distance = []
for a, b in zip(a[:, :], a[1:, :]):
    dist = torch.pairwise_distance(a, b)
    dist = dist.detach().numpy()
    dist = dist.reshape(1, -1)
    distance.append(dist)

distance = np.concatenate(distance, axis=0)
#print(distance)

distance = torch.from_numpy(distance).type(torch.float)
#speed = distance / 0.4
speed = distance
print(torch.sigmoid(speed))


